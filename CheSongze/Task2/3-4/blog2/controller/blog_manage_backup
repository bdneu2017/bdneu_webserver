# -*- coding: utf-8 -*-
import sys
reload(sys)
sys.setdefaultencoding('utf8')

from flask_login import login_required, login_user, logout_user
from blog2.model.User import  User
from blog2.model.Category import Category
import os

from blog2 import app,db
from flask import request,render_template,flash,abort,url_for,redirect,session,Flask,g

@app.route('/')
@login_required
def show_entries():
    categorys = Category.query.all()
    return render_template('show_entries.html',entries=categorys)

@app.route('/add',methods=['POST'])
@login_required
def add_entry():
    if not session.get('logged_in'):
        abort(401)
    title = request.form['title']
    content = request.form['text']
    category = Category(title,content)
    db.session.add(category)
    try: 
        db.session.commit()
    except:
        flash('标题与已有条目重复，留言失败。')
    else:
        flash('留言成功。')
    return redirect(url_for('show_entries'))

@app.route('/login',methods=['GET','POST'])
def login():
    error = None
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        user = User.query.filter_by(username=request.form['username']).first()
        '''
        passwd = User.query.filter_by(password=request.form['password']).first()

        if user is None:
            error = 'Invalid username'
        elif passwd is None:
            error = 'Invalid password'
        else:
            session['logged_in'] = True
            flash('You were logged in')
            return redirect(url_for('show_entries'))
        '''
        if user is not None and password == user.password:
            login_user(user)
            return redirect(url_for('show_entries'))
        else:
            flash('登陆失败，请检查用户名与密码是否正确。')
    return render_template('login.html', error=error)

@app.route('/register',methods=['GET','POST'])
def register():
    error = None
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        user = User(username, password)
        db.session.add(user)
        try: 
            db.session.commit()
        except:
            flash('用户名已被占用，注册失败。')
        else:
            flash('注册成功。')
        return redirect(url_for('show_entries'))
    return render_template('register.html', error=error)


@app.route('/logout')
@login_required
def logout():
    #session.pop('logged_in', None)
    logout_user()
    flash('登出成功。')
    return redirect(url_for('show_entries'))